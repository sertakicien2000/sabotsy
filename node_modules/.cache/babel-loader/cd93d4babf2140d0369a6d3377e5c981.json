{"ast":null,"code":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\n\nvar api = require('../api');\n/**\n * The billing agreements allows merchants to have users agree to be billed\n * for billing plans\n * @return {Object} billing agreement functions\n */\n\n\nfunction billingAgreement() {\n  var baseURL = '/v1/payments/billing-agreements/';\n  var operations = ['create', 'get', 'update', 'cancel'];\n  /**\n   * Search for transactions within a billing agreement\n   * @param  {String}   id         Identifier of the agreement resource for which to list transactions.\n   * @param  {String}   start_date YYYY-MM-DD start date of range of transactions to list\n   * @param  {String}   end_date   YYYY-MM-DD end date of range of transactions to list\n   * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n   * @param  {Function} cb         \n   * @return {Object}              agreement transaction list, array of agreement transaction objects\n   */\n\n  function searchTransactions(id, start_date, end_date, config, cb) {\n    var date_range = {\n      \"start_date\": start_date,\n      \"end_date\": end_date\n    };\n    api.executeHttp('GET', baseURL + id + '/transactions', date_range, config, cb);\n  }\n  /**\n   * Bill outstanding balance of an agreement\n   * @param  {String}   id     Identifier of the agreement resource for which to bill balance\n   * @param  {Object}   data   Agreement state descriptor, fields include note and amount which has two attributes, value and currency\n   * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n   * @param  {Function} cb      \n   * @return {}          Returns the HTTP status of 204 if the call is successful\n   */\n\n\n  function billBalance(id, data, config, cb) {\n    api.executeHttp('POST', baseURL + id + '/bill-balance', data, config, cb);\n  }\n  /**\n   * Set the outstanding amount of an agreement\n   * @param  {String}   id     Identifier of the agreement resource for which to set balance\n   * @param  {Object}   data   Two attributes currency e.g. \"USD\" and value e.g. \"100\"\n   * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n   * @param  {Function} cb\n   * @return {}          Returns the HTTP status of 204 if the call is successful\n   */\n\n\n  function setBalance(id, data, config, cb) {\n    api.executeHttp('POST', baseURL + id + '/set-balance', data, config, cb);\n  }\n\n  var ret = {\n    baseURL: baseURL,\n\n    /**\n     * Execute an agreement after the buyer approves it\n     * @param  {String}   token  Payment Token of format EC-XXXXXX, appended to return url as a parameter after buyer approves agreement\n     * @param  {Object|Function}   data Empty object or callback. Optional, will be removed in next major release. \n     * @param  {Object|Function}   config Configuration parameters e.g. client_id, client_secret override or callback\n     * @param  {Function} cb     \n     * @return {Object}          agreement object\n     */\n    execute: function execute(token, data, config, cb) {\n      //support case where neither data nor config is provided\n      if (typeof data === \"function\" && arguments.length === 2) {\n        cb = data;\n        data = {};\n      }\n\n      api.executeHttp('POST', this.baseURL + token + '/agreement-execute', data, config, cb);\n    },\n\n    /**\n     * Changes agreement state to suspended, can be reactivated unlike cancelling agreement\n     * @param  {String}   id     Identifier of the agreement resource for which to suspend\n     * @param  {Object}   data   Add note attribute, reason for changing state of agreement\n     * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n     * @param  {Function} cb\n     * @return {}          Returns the HTTP status of 204 if the call is successful\n     */\n    suspend: function suspend(id, data, config, cb) {\n      api.executeHttp('POST', this.baseURL + id + '/suspend', data, config, cb);\n    },\n\n    /**\n     * Reactivate a suspended agreement\n     * @param  {String}   id     Identifier of the agreement resource for which to reactivate\n     * @param  {Object}   data   Add note attribute, reason for changing state of agreement\n     * @param  {Object|Function}   config     Configuration parameters e.g. client_id, client_secret override or callback\n     * @param  {Function} cb\n     * @return {}          Returns the HTTP status of 204 if the call is successful\n     */\n    reactivate: function reactivate(id, data, config, cb) {\n      api.executeHttp('POST', this.baseURL + id + '/re-activate', data, config, cb);\n    },\n    billBalance: billBalance,\n    setBalance: setBalance,\n    searchTransactions: searchTransactions,\n    //entries below are deprecated but provided for compatibility with 0.* versions\n    bill_balance: billBalance,\n    set_balance: setBalance,\n    search_transactions: searchTransactions\n  };\n  ret = generate.mixin(ret, operations);\n  return ret;\n}\n\nmodule.exports = billingAgreement;","map":null,"metadata":{},"sourceType":"script"}