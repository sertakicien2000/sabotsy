{"ast":null,"code":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar https = require('https');\n\nvar isArray = Array.isArray;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nvar getDefaultEndpoint = exports.getDefaultEndpoint = function getDefaultEndpoint(mode) {\n  return typeof mode === \"string\" && mode === \"live\" ? \"paypal.com\" : \"sandbox.paypal.com\";\n};\n\nvar getDefaultApiEndpoint = exports.getDefaultApiEndpoint = function getDefaultApiEndpoint(mode) {\n  var api = typeof mode === \"string\" && mode === \"security-test-sandbox\" ? \"test-api.\" : \"api.\";\n  return api + getDefaultEndpoint(mode);\n};\n/**\n * Recursively copies given object into a new object. Helper method for merge\n * @param  {Object} v\n * @return {Object}\n */\n\n\nfunction clone(v) {\n  if (v === null || typeof v !== \"object\") {\n    return v;\n  }\n\n  if (isArray(v)) {\n    var arr = v.slice();\n\n    for (var i = 0; i < v.length; i++) {\n      arr[i] = clone(arr[i]);\n    }\n\n    return arr;\n  } else {\n    var obj = {};\n\n    for (var k in v) {\n      obj[k] = clone(v[k]);\n    }\n\n    return obj;\n  }\n}\n/**\n * Merges two Objects recursively, setting property of obj1 to those of obj2\n * and creating property as necessary. \n *\n * Implementation suggested by @kobalicek on https://github.com/paypal/PayPal-node-SDK/issues/69\n * @param  {Object} obj1 \n * @param  {Object} obj2 \n * @return {Object}     \n */\n\n\nvar merge = exports.merge = function merge(obj1, obj2, appendOnly) {\n  //Handle invalid arguments\n  if (obj1 === null || typeof obj1 !== \"object\") {\n    throw new TypeError(\"merge() - first parameter has to be an object, not \" + typeof obj1 + \".\");\n  }\n\n  if (obj2 === null || typeof obj2 !== \"object\") {\n    throw new TypeError(\"merge() - first parameter has to be an object, not \" + typeof obj2 + \".\");\n  }\n\n  if (isArray(obj1) || isArray(obj2)) {\n    throw new TypeError(\"merge() - Unsupported for arrays.\");\n  }\n\n  for (var k in obj2) {\n    var obj1Val,\n        obj2Val = obj2[k];\n\n    if (hasOwn.call(obj1, k)) {\n      if (!appendOnly) {\n        obj1Val = obj1[k];\n\n        if (obj1Val !== null && typeof obj1Val === \"object\" && obj2Val !== null && typeof obj2Val === \"object\") {\n          merge(obj1Val, obj2Val);\n        } else {\n          obj1[k] = clone(obj2Val);\n        }\n      }\n    } else {\n      obj1[k] = clone(obj2Val);\n    }\n  }\n\n  return obj1;\n};\n/**\n * Checks if access token for client id has expired\n * @param  {Object} token_hash  object returned from paypal access token request\n *                              with expires_in set and sdk sets the created_at\n * @return {Boolean}            true if token expired else false\n */\n\n\nvar checkExpiredToken = exports.checkExpiredToken = function checkExpiredToken(token_hash) {\n  var delta = new Date().getTime() / 1000 - token_hash.created_at;\n  return delta < token_hash.expires_in ? false : true;\n};","map":null,"metadata":{},"sourceType":"script"}