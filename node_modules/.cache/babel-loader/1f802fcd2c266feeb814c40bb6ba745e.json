{"ast":null,"code":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar generate = require('../generate');\n\nvar api = require('../api');\n\nvar https = require('https');\n\nvar crypto = require('crypto');\n\nvar crc32 = require('buffer-crc32');\n/**\n * Exposes REST endpoints for creating and managing webhooks\n * @return {Object} webhook functions\n */\n\n\nfunction webhook() {\n  var baseURL = '/v1/notifications/webhooks/';\n  var operations = ['create', 'list', 'get', 'del', 'delete'];\n  var ret = {\n    baseURL: baseURL,\n    replace: function replace(id, data, config, cb) {\n      api.executeHttp('PATCH', this.baseURL + id, data, config, cb);\n    },\n    eventTypes: function eventTypes(id, config, cb) {\n      api.executeHttp('GET', this.baseURL + id + '/event-types', {}, config, cb);\n    }\n  };\n  ret = generate.mixin(ret, operations);\n  return ret;\n}\n/**\n * Exposes REST endpoints for working with subscribed webhooks events\n *\n * https://developer.paypal.com/webapps/developer/docs/integration/direct/rest-webhooks-overview/#events\n * @return {Object} webhook event functions\n */\n\n\nfunction webhookEvent() {\n  var baseURL = '/v1/notifications/webhooks-events/';\n  var operations = ['list', 'get'];\n  /**\n   * Instead of calling this method, it is recommended that you initiate a GET request in your code for the webhook\n   * event data and use the returned information from the webhook or use the updated verify() function. See\n   * https://github.com/paypal/PayPal-node-SDK/wiki/Webhook-Validation\n   *\n   * @example\n   * var paypal = require('paypal-rest-sdk');\n   * function(request, response) {\n   *     try {\n   *         // Get the Webhook event id from the incoming event request\n   *         var webhookEventId = JSON.parse(request.body).id;\n   *\n   *         paypal.notification.webhookEvent.get(webhookEventId, function (error, webhookEvent) {\n   *             if (error) {\n   *                 console.log(error);\n   *                 // The webhook event data could not be found.\n   *                 // Send a HTTP 503 response status code ( http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.4 )\n   *                 // to signal to PayPal to resend the request at a later time.\n   *                 response.sendStatus(503);\n   *             } else {\n   *                 // Proceed to use the data from PayPal\n   *                 console.log(\"Get webhookEvent Response\");\n   *                 console.log(JSON.stringify(webhookEvent));\n   *                 response.sendStatus(200);\n   *             }\n   *         });\n   *     } catch (e) {\n   *         // The webhook id could not be found or any other error occurred.\n   *         // Send a HTTP 503 response status code ( http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.4 )\n   *         // to signal to PayPal to resend the request at a later time\n   *         response.sendStatus(503);\n   *     }\n   * }\n   *\n   * @deprecated\n   * @param  {String}   body raw body of request\n   * @param  {Function} cb   callback function\n   */\n\n  function getAndVerify(body, cb) {\n    var response = false;\n    var err = null;\n\n    try {\n      var webhookEventId = JSON.parse(body).id;\n      api.executeHttp('GET', baseURL + webhookEventId, {}, function (error, res) {\n        if (error) {\n          cb(error, response);\n        } else {\n          cb(err, true);\n        }\n      });\n    } catch (e) {\n      err = new Error(\"Webhook Event Id attribute not found. Possible reason could be invalid JSON Object.\");\n      cb(err, response);\n    }\n  }\n  /**\n   * @param {Object} headers from request\n   * @param {String} raw body of request\n   * @param {String} webhook id\n   * @param {Function} callback function\n   */\n\n\n  function verify(headers, body, webhookId, callback) {\n    // In an effort not to break existing applications, accept old arguments temporarily\n    if (arguments.length > 4) {\n      /* jshint validthis: true */\n      return verifyLegacy.apply(this, arguments);\n    }\n\n    if (typeof headers !== 'object') {\n      return callback(new Error(\"headers is not an object\"), false);\n    } // Normalizes headers\n\n\n    Object.keys(headers).forEach(function (header) {\n      headers[header.toUpperCase()] = headers[header];\n    });\n    var webhookEventBody = typeof body === \"string\" ? JSON.parse(body) : body;\n    var payload = {\n      'auth_algo': headers['PAYPAL-AUTH-ALGO'],\n      'cert_url': headers['PAYPAL-CERT-URL'],\n      'transmission_id': headers['PAYPAL-TRANSMISSION-ID'],\n      'transmission_sig': headers['PAYPAL-TRANSMISSION-SIG'],\n      'transmission_time': headers['PAYPAL-TRANSMISSION-TIME'],\n      'webhook_id': webhookId,\n      'webhook_event': webhookEventBody\n    };\n    api.executeHttp('POST', '/v1/notifications/verify-webhook-signature', payload, callback);\n  }\n\n  function verifyLegacy(certURL, transmissionId, timeStamp, webhookId, eventBody, ppTransmissionSig, cb) {\n    // Emit a warning that the arguments have changed\n    if (process.env.NODE_ENV === 'development') {\n      console.log('PayPal-Node-SDK: Webhook verify arguments have changed. Please check the latest documentation on https://developer.paypal.com/docs/integration/direct/rest-webhooks-overview/#event-signature.');\n    }\n\n    var headers = {\n      // This is currently the default auth algorithm. If this changes, need to change. Legacy method did\n      // not pass in the algorithm.\n      'PAYPAL-AUTH-ALGO': 'SHA256withRSA',\n      'PAYPAL-CERT-URL': certURL,\n      'PAYPAL-TRANSMISSION-ID': transmissionId,\n      'PAYPAL-TRANSMISSION-SIG': ppTransmissionSig,\n      'PAYPAL-TRANSMISSION-TIME': timeStamp\n    };\n\n    function legacyCallback(error, response) {\n      if (error) {\n        cb(error, false);\n      } else {\n        // Verification status must be SUCCESS\n        if (response.verification_status === \"SUCCESS\") {\n          cb(null, true);\n        } else {\n          cb(null, false);\n        }\n      }\n    }\n\n    return verify(headers, eventBody, webhookId, legacyCallback);\n  }\n\n  var ret = {\n    baseURL: baseURL,\n    verify: verify,\n    getAndVerify: getAndVerify,\n    resend: function resend(id, config, cb) {\n      api.executeHttp('POST', this.baseURL + id + '/resend', {}, config, cb);\n    }\n  };\n  ret = generate.mixin(ret, operations);\n  return ret;\n}\n/**\n * Exposes REST endpoint for listing available event types for webhooks\n * @return {Object} webhook event type functions\n */\n\n\nfunction webhookEventType() {\n  var baseURL = '/v1/notifications/webhooks-event-types/';\n  var operations = ['list'];\n  var ret = {\n    baseURL: baseURL\n  };\n  ret = generate.mixin(ret, operations);\n  return ret;\n}\n/**\n * Exposes the namespace for webhook and webhook event functionalities\n * \n * https://developer.paypal.com/webapps/developer/docs/api/#notifications\n * @return {Object} notification functions\n */\n\n\nfunction notification() {\n  return {\n    webhook: webhook(),\n    webhookEvent: webhookEvent(),\n    webhookEventType: webhookEventType()\n  };\n}\n\nmodule.exports = notification;","map":null,"metadata":{},"sourceType":"script"}