{"ast":null,"code":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar client = require('./client');\n\nvar utils = require('./utils');\n\nvar configuration = require('./configure');\n/**\n * token_persist client id to access token cache, used to reduce access token round trips\n * @type {Object}\n */\n\n\nvar token_persist = {};\n/**\n * Set up configuration globally such as client_id and client_secret,\n * by merging user provided configurations otherwise use default settings\n * @param  {Object} options Configuration parameters passed as object\n * @return {undefined}\n */\n\nvar configure = exports.configure = function configure(options) {\n  if (options !== undefined && typeof options === 'object') {\n    configuration.default_options = utils.merge(configuration.default_options, options);\n  }\n\n  if (configuration.default_options.mode !== 'sandbox' && configuration.default_options.mode !== 'live') {\n    throw new Error('Mode must be \"sandbox\" or \"live\"');\n  }\n};\n/**\n * Generate new access token by making a POST request to /oauth2/token by\n * exchanging base64 encoded client id/secret pair or valid refresh token.\n *\n * Otherwise authorization code from a mobile device can be exchanged for a long\n * living refresh token used to charge user who has consented to future payments.\n * @param  {Object|Function}   config Configuration parameters such as authorization code or refresh token\n * @param  {Function} cb     Callback function\n * @return {String}          Access token or Refresh token\n */\n\n\nvar generateToken = exports.generateToken = function generateToken(config, cb) {\n  if (typeof config === \"function\") {\n    cb = config;\n    config = configuration.default_options;\n  } else if (!config) {\n    config = configuration.default_options;\n  } else {\n    config = utils.merge(config, configuration.default_options, true);\n  }\n\n  var payload = 'grant_type=client_credentials';\n\n  if (config.authorization_code) {\n    payload = 'grant_type=authorization_code&response_type=token&redirect_uri=urn:ietf:wg:oauth:2.0:oob&code=' + config.authorization_code;\n  } else if (config.refresh_token) {\n    payload = 'grant_type=refresh_token&refresh_token=' + config.refresh_token;\n  }\n\n  var basicAuthString = 'Basic ' + new Buffer(config.client_id + ':' + config.client_secret).toString('base64');\n  var http_options = {\n    schema: config.schema || configuration.default_options.schema,\n    host: utils.getDefaultApiEndpoint(config.mode) || config.host || configuration.default_options.host,\n    port: config.port || configuration.default_options.port,\n    headers: utils.merge({\n      'Authorization': basicAuthString,\n      'Accept': 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }, configuration.default_options.headers, true)\n  };\n  client.invoke('POST', '/v1/oauth2/token', payload, http_options, function (err, res) {\n    var token = null;\n\n    if (res) {\n      if (!config.authorization_code && !config.refresh_token) {\n        var seconds = new Date().getTime() / 1000;\n        token_persist[config.client_id] = res;\n        token_persist[config.client_id].created_at = seconds;\n      }\n\n      if (!config.authorization_code) {\n        token = res.token_type + ' ' + res.access_token;\n      } else {\n        token = res.refresh_token;\n      }\n    }\n\n    cb(err, token);\n  });\n};\n/* Update authorization header with new token obtained by calling\ngenerateToken */\n\n/**\n * Updates http Authorization header to newly created access token\n * @param  {Object}   http_options   Configuration parameters such as authorization code or refresh token\n * @param  {Function}   error_callback\n * @param  {Function} callback\n */\n\n\nfunction updateToken(http_options, error_callback, callback) {\n  generateToken(http_options, function (error, token) {\n    if (error) {\n      error_callback(error, token);\n    } else {\n      http_options.headers.Authorization = token;\n      callback();\n    }\n  });\n}\n/**\n * Makes a PayPal REST API call. Reuses valid access tokens to reduce\n * round trips, handles 401 error and token expiration.\n * @param  {String}   http_method           A HTTP Verb e.g. GET or POST\n * @param  {String}   path                  Url endpoint for API request\n * @param  {Data}   data                    Payload associated with API request\n * @param  {Object|Function}   http_options Configurations for settings and Auth\n * @param  {Function} cb                    Callback function\n */\n\n\nvar executeHttp = exports.executeHttp = function executeHttp(http_method, path, data, http_options, cb) {\n  if (typeof http_options === \"function\") {\n    cb = http_options;\n    http_options = null;\n  }\n\n  if (!http_options) {\n    http_options = configuration.default_options;\n  } else {\n    http_options = utils.merge(http_options, configuration.default_options, true);\n  } //Get host endpoint using mode\n\n\n  http_options.host = utils.getDefaultApiEndpoint(http_options.mode) || http_options.host;\n\n  function retryInvoke() {\n    client.invoke(http_method, path, data, http_options, cb);\n  } // correlation-id is deprecated in favor of client-metadata-id\n\n\n  if (http_options.client_metadata_id) {\n    http_options.headers['Paypal-Client-Metadata-Id'] = http_options.client_metadata_id;\n  } else if (http_options.correlation_id) {\n    http_options.headers['Paypal-Client-Metadata-Id'] = http_options.correlation_id;\n  } // If client_id exists with an unexpired token and a refresh token is not provided, reuse cached token\n\n\n  if (http_options.client_id in token_persist && !utils.checkExpiredToken(token_persist[http_options.client_id]) && !http_options.refresh_token) {\n    http_options.headers.Authorization = \"Bearer \" + token_persist[http_options.client_id].access_token;\n    client.invoke(http_method, path, data, http_options, function (error, response) {\n      // Don't reprompt already authenticated user for login by updating Authorization header\n      // if token expires\n      if (error && error.httpStatusCode === 401 && http_options.client_id && http_options.headers.Authorization) {\n        http_options.headers.Authorization = null;\n        updateToken(http_options, cb, retryInvoke);\n      } else {\n        cb(error, response);\n      }\n    });\n  } else {\n    updateToken(http_options, cb, retryInvoke);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}