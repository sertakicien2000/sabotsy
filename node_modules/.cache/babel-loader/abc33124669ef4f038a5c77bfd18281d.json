{"ast":null,"code":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar configuration = require('../configure');\n\nvar client = require('../client');\n\nvar utils = require('../utils');\n\nvar querystring = require('querystring');\n/**\n * Sets up request body for open id connect module requests\n * @param  {String}   path              url endpoint\n * @param  {Object}   data              Payload for HTTP Request\n * @param  {Object|Function}   config   Configuration parameters such as authorization code or refresh token\n * @param  {Function} cb     \n */\n\n\nfunction openIdConnectRequest(path, data, config, cb) {\n  var http_options = {\n    schema: config.openid_connect_schema || configuration.default_options.openid_connect_schema,\n    host: utils.getDefaultApiEndpoint(config.mode) || config.openid_connect_host,\n    port: config.openid_connect_port || configuration.default_options.openid_connect_port,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }; //Populate Basic Auth header only for endpoints that need it such as tokeninfo\n\n  if (data.client_id && data.client_secret) {\n    http_options.headers.Authorization = 'Basic ' + new Buffer(data.client_id + ':' + data.client_secret).toString('base64');\n  }\n\n  client.invoke('POST', path, querystring.stringify(data), http_options, cb);\n}\n/**\n * @param  {Object} config Configurations for settings and Auth\n * @return {String}        client id\n */\n\n\nfunction getClientId(config) {\n  return config.openid_client_id || config.client_id || configuration.default_options.openid_client_id || configuration.default_options.client_id;\n}\n/**\n * @param  {Object} config Configurations for settings and Auth\n * @return {String}        client secret\n */\n\n\nfunction getClientSecret(config) {\n  return config.openid_client_secret || config.client_secret || configuration.default_options.openid_client_secret || configuration.default_options.client_secret;\n}\n/**\n * Configurations for settings and Auth\n * @return {String}        redirect uri\n */\n\n\nfunction getRedirectUri(config) {\n  return config.openid_redirect_uri || configuration.default_options.openid_redirect_uri;\n}\n/**\n * Obtain a userâ€™s consent to make Identity API calls on their behalf by redirecting them\n * to authorization endpoint\n * @param  {Data}   data      Payload associated with API request\n * @param  {Object} config    Configurations for settings and Auth\n * @return {String}        authorize url\n */\n\n\nfunction authorizeUrl(data, config) {\n  config = config || configuration.default_options;\n  data = data || {}; //Use mode provided, live or sandbox to construct authorize_url, sandbox is default\n\n  var url = 'https://www.' + utils.getDefaultEndpoint(config.mode) + '/signin/authorize' || config.authorize_url;\n  data = utils.merge({\n    'client_id': getClientId(config),\n    'scope': 'openid',\n    'response_type': 'code',\n    'redirect_uri': getRedirectUri(config)\n  }, data);\n  return url + '?' + querystring.stringify(data);\n}\n/**\n * Direct user to logout url to end session\n * @param  {Data}   data      Payload associated with API request\n * @param  {Object} config    Configurations for settings and Auth\n * @return {String}        logout url\n */\n\n\nfunction logoutUrl(data, config) {\n  config = config || configuration.default_options;\n  data = data || {};\n  var url = 'https://www.' + utils.getDefaultEndpoint(config.mode) + '/webapps/auth/protocol/openidconnect/v1/endsession' || config.logout_url;\n\n  if (typeof data === 'string') {\n    data = {\n      'id_token': data\n    };\n  }\n\n  data = utils.merge({\n    'logout': 'true',\n    'redirect_uri': getRedirectUri(config)\n  }, data);\n  return url + '?' + querystring.stringify(data);\n}\n/**\n * Grant a new access token, using a refresh token\n * @param  {Object}   data   Payload associated with API request\n * @param  {Object|Function}   config Configurations for settings and Auth\n * @param  {Function} cb     Callback function\n */\n\n\nfunction tokenInfoRequest(data, config, cb) {\n  if (typeof config === 'function') {\n    cb = config;\n    config = configuration.default_options;\n  } else if (!config) {\n    config = configuration.default_options;\n  }\n\n  data = utils.merge({\n    'client_id': getClientId(config),\n    'client_secret': getClientSecret(config)\n  }, data);\n  openIdConnectRequest('/v1/identity/openidconnect/tokenservice', data, config, cb);\n}\n/**\n * Retrieve user profile attributes\n * @param  {Object}   data   Payload associated with API request\n * @param  {Object|Function}   config Configurations for settings and Auth\n * @param  {Function} cb     Callback function\n */\n\n\nfunction userInfoRequest(data, config, cb) {\n  if (typeof config === 'function') {\n    cb = config;\n    config = configuration.default_options;\n  } else if (!config) {\n    config = configuration.default_options;\n  }\n\n  if (typeof data === 'string') {\n    data = {\n      'access_token': data\n    };\n  }\n\n  data = utils.merge({\n    'schema': 'openid'\n  }, data);\n  openIdConnectRequest('/v1/identity/openidconnect/userinfo', data, config, cb);\n}\n/**\n * Use log in with PayPal to avoid storing user data on the system\n * @return {Object} openidconnect functions\n */\n\n\nfunction openIdConnect() {\n  return {\n    tokeninfo: {\n      create: function create(data, config, cb) {\n        if (typeof data === 'string') {\n          data = {\n            'code': data\n          };\n        }\n\n        data.grant_type = 'authorization_code';\n        tokenInfoRequest(data, config, cb);\n      },\n      refresh: function refresh(data, config, cb) {\n        if (typeof data === 'string') {\n          data = {\n            'refresh_token': data\n          };\n        }\n\n        data.grant_type = 'refresh_token';\n        tokenInfoRequest(data, config, cb);\n      }\n    },\n    authorizeUrl: authorizeUrl,\n    logoutUrl: logoutUrl,\n    userinfo: {\n      get: userInfoRequest\n    },\n    //entries below are deprecated but provided for compatibility with 0.* versions\n    authorize_url: authorizeUrl,\n    logout_url: logoutUrl\n  };\n}\n\nmodule.exports = openIdConnect;","map":null,"metadata":{},"sourceType":"script"}