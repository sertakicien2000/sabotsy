{"ast":null,"code":"/* Copyright 2015-2016 PayPal, Inc. */\n\"use strict\";\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar querystring = require('querystring');\n\nvar configuration = require('./configure');\n\nvar semver = require('semver');\n/**\n * Wraps the http client, handles request parameters, populates request headers, handles response\n * @param  {String}   http_method        HTTP Method GET/POST\n * @param  {String}   path               url endpoint\n * @param  {Object}   data               Payload for HTTP Request\n * @param  {Object}   http_options_param Configuration parameters\n * @param  {Function} cb                 [description]\n */\n\n\nvar invoke = exports.invoke = function invoke(http_method, path, data, http_options_param, cb) {\n  var client = http_options_param.schema === 'http' ? http : https;\n  var request_data = data;\n\n  if (http_method === 'GET') {\n    //format object parameters into GET request query string\n    if (typeof request_data !== 'string') {\n      request_data = querystring.stringify(request_data);\n    }\n\n    if (request_data) {\n      path = path + \"?\" + request_data;\n      request_data = \"\";\n    }\n  } else if (typeof request_data !== 'string') {\n    request_data = JSON.stringify(request_data);\n  }\n\n  var http_options = {};\n\n  if (http_options_param) {\n    http_options = JSON.parse(JSON.stringify(http_options_param));\n\n    if (!http_options.headers) {\n      http_options.headers = {};\n    }\n\n    http_options.path = path;\n    http_options.method = http_method;\n\n    if (request_data) {\n      http_options.headers['Content-Length'] = Buffer.byteLength(request_data, 'utf-8');\n    }\n\n    if (!http_options.headers.Accept) {\n      http_options.headers.Accept = 'application/json';\n    }\n\n    if (!http_options.headers['Content-Type']) {\n      http_options.headers['Content-Type'] = 'application/json';\n    }\n\n    http_options.headers['User-Agent'] = configuration.userAgent;\n    http_options.withCredentials = false;\n  } // Enable full request response logging in development/non-production environment only\n\n\n  if (configuration.default_options.mode !== 'live' && process.env.PAYPAL_DEBUG) {\n    console.dir(JSON.stringify(http_options.headers));\n    console.dir(request_data);\n  } //PCI compliance\n\n\n  if (process.versions !== undefined && process.versions.openssl !== undefined && semver.lt(process.versions.openssl.slice(0, 5), '1.0.1')) {\n    console.warn('WARNING: openssl version ' + process.versions.openssl + ' detected. Per PCI Security Council mandate (https://github.com/paypal/TLS-update), you MUST update to the latest security library.');\n  }\n\n  var req = client.request(http_options);\n  req.on('error', function (e) {\n    console.log('problem with request: ' + e.message);\n    cb(e, null);\n  });\n  req.on('response', function (res) {\n    var response = ''; //do not setEndcoding with browserify\n\n    if (res.setEncoding) {\n      res.setEncoding('utf8');\n    }\n\n    res.on('data', function (chunk) {\n      response += chunk;\n    });\n    res.on('end', function () {\n      var err = null;\n\n      try {\n        //export PAYPAL_DEBUG to development to get access to paypal-debug-id\n        //for questions to merchant technical services.\n        if (res.headers['paypal-debug-id'] !== undefined && process.env.PAYPAL_DEBUG) {\n          console.log('paypal-debug-id: ' + res.headers['paypal-debug-id']);\n\n          if (configuration.default_options.mode !== 'live') {\n            console.dir(JSON.stringify(res.headers));\n            console.dir(response);\n          }\n        } // Set response to an empty object if no data was received\n\n\n        if (response.trim() === '') {\n          response = {};\n        } else if (typeof res.headers['content-type'] === \"string\" && res.headers['content-type'].match(/^application\\/json(?:;.*)?$/) !== null) {\n          // Set response to be parsed JSON object if data received is json\n          // expect that content-type header has application/json when it\n          // returns data\n          response = JSON.parse(response);\n        }\n\n        response.httpStatusCode = res.statusCode;\n      } catch (e) {\n        err = new Error('Invalid JSON Response Received. If the response received is empty, please check' + 'the httpStatusCode attribute of error message for 401 or 403. It is possible that the client credentials' + 'are invalid for the environment you are using, be it live or sandbox.');\n        err.error = {\n          name: 'Invalid JSON Response Received, JSON Parse Error.'\n        };\n        err.response = response;\n        err.httpStatusCode = res.statusCode;\n        response = null;\n      }\n\n      if (!err && (res.statusCode < 200 || res.statusCode >= 300)) {\n        err = new Error('Response Status : ' + res.statusCode); // response contains the full json description of the error\n        // that PayPal returns and information link\n\n        err.response = response;\n\n        if (process.env.PAYPAL_DEBUG) {\n          err.response_stringified = JSON.stringify(response);\n        }\n\n        err.httpStatusCode = res.statusCode;\n        response = null;\n      }\n\n      cb(err, response);\n    });\n  });\n\n  if (request_data) {\n    req.write(request_data);\n  }\n\n  req.end();\n};","map":null,"metadata":{},"sourceType":"script"}